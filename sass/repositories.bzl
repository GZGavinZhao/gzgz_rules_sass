"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//sass/private:toolchains_repo.bzl", "PLATFORMS", "PLATFORM_NAMES", "toolchains_repo")
load("//sass/private:versions.bzl", "SASS_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def gzgz_rules_sass_dependencies():
    # The minimal version of bazel_skylib we require
    http_archive(
        name = "bazel_skylib",
        sha256 = "74d544d96f4a5bb630d465ca8bbcfe231e3594e5aae57e1edbf17a6eb3ca2506",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.3.0/bazel-skylib-1.3.0.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for sass toolchain"
_ATTRS = {
    "sass_version": attr.string(mandatory = True),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _sass_repo_impl(repository_ctx):
    sass_version = repository_ctx.attr.sass_version
    platform = repository_ctx.attr.platform

    if SASS_VERSIONS.get(sass_version) == None:
        # buildifier: disable=print
        print("WARNING: content integrity for Dart Sass version " + sass_version + " cannot be checked. Consider manually specifying checksums or switch versions.")
    elif SASS_VERSIONS[sass_version].get(platform) == None:
        # This Sass version doesn't provide the given platform.
        return

    url = "https://github.com/sass/dart-sass/releases/download/{0}/dart-sass-{0}-{1}.{2}".format(
        sass_version,
        PLATFORM_NAMES[platform],
        "tar.gz" if platform.find("windows") == -1 else "zip",
    )
    repository_ctx.download_and_extract(
        url = url,
        stripPrefix = "dart-sass",
        integrity = SASS_VERSIONS[sass_version][platform] if SASS_VERSIONS.get(sass_version) else "",
    )
    build_content = """# Generated by sass/repositories.bzl
load("@gzgz_rules_sass//sass:toolchain.bzl", "sass_toolchain")

sass_toolchain(
    name = "sass_toolchain",
    sass = select({
        "@bazel_tools//src/conditions:host_windows": "sass.bat",
        "//conditions:default": "sass",
    }),
)
"""

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

sass_repositories = repository_rule(
    _sass_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def sass_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "sass_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "sass_host"
    - create a repository exposing toolchains for each platform like "sass_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "sass1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each node_repositories call
    """
    for platform in PLATFORMS.keys():
        sass_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
